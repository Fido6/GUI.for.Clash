// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as http$0 from "../../net/http/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function AbsolutePath(path: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1030809430, path) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function AddScheduledTask(spec: string, event: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(478669655, spec, event) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function BridgeHTTPApi(next: http$0.Handler): Promise<http$0.Handler> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1575657463, next) as any;
    return $resultPromise;
}

export function BridgeRollingReleaseApi(next: http$0.Handler): Promise<http$0.Handler> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1260094513, next) as any;
    return $resultPromise;
}

export function CloseMMDB(path: string, id: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2763239600, path, id) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Copyfile(src: string, dst: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(936578571, src, dst) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Download(url: string, path: string, headers: { [_: string]: string }, event: string, options: $models.RequestOptions): Promise<$models.HTTPResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1087491584, url, path, headers, event, options) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Exec(path: string, args: string[], options: $models.ExecOptions): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3585212073, path, args, options) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function ExecBackground(path: string, args: string[], outEvent: string, endEvent: string, options: $models.ExecOptions): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2429437561, path, args, outEvent, endEvent, options) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function ExitApp(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3652434347) as any;
    return $resultPromise;
}

export function FileExists(path: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1582404526, path) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetEnv(): Promise<$models.EnvResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(200788523) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetInterfaces(): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3419146132) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function IsStartup(): Promise<boolean> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4294612777) as any;
    return $resultPromise;
}

export function KillProcess(pid: number): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1632748717, pid) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function ListServer(): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1260813187) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Makedir(path: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3207731777, path) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Movefile(source: string, target: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1225379035, source, target) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Notify(title: string, message: string, icon: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1627021241, title, message, icon) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function OpenMMDB(path: string, id: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(398448460, path, id) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function ProcessInfo(pid: number): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3064213533, pid) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function QueryMMDB(path: string, ip: string, types: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1464177104, path, ip, types) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Readdir(path: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1066135867, path) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Readfile(path: string, options: $models.IOOptions): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1907897266, path, options) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function RemoveScheduledTask(id: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3592044818, id) as any;
    return $resultPromise;
}

export function Removefile(path: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1739657902, path) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Requests(method: string, url: string, headers: { [_: string]: string }, body: string, options: $models.RequestOptions): Promise<$models.HTTPResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1431689990, method, url, headers, body, options) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function RestartApp(): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2261232286) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function StartServer(address: string, serverID: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1390037327, address, serverID) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function StopServer(id: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2549643187, id) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function UnzipGZFile(path: string, output: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1054857985, path, output) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function UnzipZIPFile(path: string, output: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(593984463, path, output) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function UpdateTray(tray: $models.TrayContent): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4248840737, tray) as any;
    return $resultPromise;
}

export function UpdateTrayMenus(menus: $models.MenuItem[]): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2318509503, menus) as any;
    return $resultPromise;
}

export function Upload(url: string, path: string, headers: { [_: string]: string }, event: string, options: $models.RequestOptions): Promise<$models.HTTPResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2333760993, url, path, headers, event, options) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function ValidateCron(spec: string): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3164167762, spec) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function Writefile(path: string, content: string, options: $models.IOOptions): Promise<$models.FlagResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2044951857, path, content, options) as any;
    let $typingPromise = $resultPromise.then(($result) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = $models.FlagResult.createFrom;
const $$createType1 = $models.HTTPResult.createFrom;
const $$createType2 = $models.EnvResult.createFrom;
