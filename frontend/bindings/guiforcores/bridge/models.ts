// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as http$0 from "../../net/http/models.js";

export class EnvResult {
    "appName": string;
    "basePath": string;
    "os": string;
    "arch": string;
    "x64Level": number;

    /** Creates a new EnvResult instance. */
    constructor($$source: Partial<EnvResult> = {}) {
        if (!("appName" in $$source)) {
            this["appName"] = "";
        }
        if (!("basePath" in $$source)) {
            this["basePath"] = "";
        }
        if (!("os" in $$source)) {
            this["os"] = "";
        }
        if (!("arch" in $$source)) {
            this["arch"] = "";
        }
        if (!("x64Level" in $$source)) {
            this["x64Level"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new EnvResult instance from a string or object.
     */
    static createFrom($$source: any = {}): EnvResult {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new EnvResult($$parsedSource as Partial<EnvResult>);
    }
}

export class ExecOptions {
    "convert": boolean;
    "env": { [_: string]: string };

    /** Creates a new ExecOptions instance. */
    constructor($$source: Partial<ExecOptions> = {}) {
        if (!("convert" in $$source)) {
            this["convert"] = false;
        }
        if (!("env" in $$source)) {
            this["env"] = {};
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ExecOptions instance from a string or object.
     */
    static createFrom($$source: any = {}): ExecOptions {
        const $$createField1_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("env" in $$parsedSource) {
            $$parsedSource["env"] = $$createField1_0($$parsedSource["env"]);
        }
        return new ExecOptions($$parsedSource as Partial<ExecOptions>);
    }
}

export class FlagResult {
    "flag": boolean;
    "data": string;

    /** Creates a new FlagResult instance. */
    constructor($$source: Partial<FlagResult> = {}) {
        if (!("flag" in $$source)) {
            this["flag"] = false;
        }
        if (!("data" in $$source)) {
            this["data"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new FlagResult instance from a string or object.
     */
    static createFrom($$source: any = {}): FlagResult {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new FlagResult($$parsedSource as Partial<FlagResult>);
    }
}

export class HTTPResult {
    "flag": boolean;
    "status": number;
    "headers": http$0.Header;
    "body": string;

    /** Creates a new HTTPResult instance. */
    constructor($$source: Partial<HTTPResult> = {}) {
        if (!("flag" in $$source)) {
            this["flag"] = false;
        }
        if (!("status" in $$source)) {
            this["status"] = 0;
        }
        if (!("headers" in $$source)) {
            this["headers"] = ({} as http$0.Header);
        }
        if (!("body" in $$source)) {
            this["body"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new HTTPResult instance from a string or object.
     */
    static createFrom($$source: any = {}): HTTPResult {
        const $$createField2_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("headers" in $$parsedSource) {
            $$parsedSource["headers"] = $$createField2_0($$parsedSource["headers"]);
        }
        return new HTTPResult($$parsedSource as Partial<HTTPResult>);
    }
}

export class IOOptions {
    /**
     * Binary / Text
     */
    "Mode": string;

    /** Creates a new IOOptions instance. */
    constructor($$source: Partial<IOOptions> = {}) {
        if (!("Mode" in $$source)) {
            this["Mode"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new IOOptions instance from a string or object.
     */
    static createFrom($$source: any = {}): IOOptions {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new IOOptions($$parsedSource as Partial<IOOptions>);
    }
}

export class MenuItem {
    "id": string;

    /**
     * Menu Type: item / separator / checkbox / radio
     */
    "type": string;
    "text": string;
    "tooltip": string;
    "hidden": boolean;
    "checked": boolean;
    "children": MenuItem[];

    /** Creates a new MenuItem instance. */
    constructor($$source: Partial<MenuItem> = {}) {
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("type" in $$source)) {
            this["type"] = "";
        }
        if (!("text" in $$source)) {
            this["text"] = "";
        }
        if (!("tooltip" in $$source)) {
            this["tooltip"] = "";
        }
        if (!("hidden" in $$source)) {
            this["hidden"] = false;
        }
        if (!("checked" in $$source)) {
            this["checked"] = false;
        }
        if (!("children" in $$source)) {
            this["children"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new MenuItem instance from a string or object.
     */
    static createFrom($$source: any = {}): MenuItem {
        const $$createField6_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("children" in $$parsedSource) {
            $$parsedSource["children"] = $$createField6_0($$parsedSource["children"]);
        }
        return new MenuItem($$parsedSource as Partial<MenuItem>);
    }
}

export class RequestOptions {
    "Proxy": string;
    "Insecure": boolean;
    "Timeout": number;

    /** Creates a new RequestOptions instance. */
    constructor($$source: Partial<RequestOptions> = {}) {
        if (!("Proxy" in $$source)) {
            this["Proxy"] = "";
        }
        if (!("Insecure" in $$source)) {
            this["Insecure"] = false;
        }
        if (!("Timeout" in $$source)) {
            this["Timeout"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RequestOptions instance from a string or object.
     */
    static createFrom($$source: any = {}): RequestOptions {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new RequestOptions($$parsedSource as Partial<RequestOptions>);
    }
}

export class TrayContent {
    "icon": string;
    "title": string;
    "tooltip": string;

    /** Creates a new TrayContent instance. */
    constructor($$source: Partial<TrayContent> = {}) {
        if (!("icon" in $$source)) {
            this["icon"] = "";
        }
        if (!("title" in $$source)) {
            this["title"] = "";
        }
        if (!("tooltip" in $$source)) {
            this["tooltip"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TrayContent instance from a string or object.
     */
    static createFrom($$source: any = {}): TrayContent {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new TrayContent($$parsedSource as Partial<TrayContent>);
    }
}

// Private type creation functions
const $$createType0 = $Create.Map($Create.Any, $Create.Any);
var $$createType1 = (function $$initCreateType1(...args): any {
    if ($$createType1 === $$initCreateType1) {
        $$createType1 = $$createType3;
    }
    return $$createType1(...args);
});
const $$createType2 = $Create.Array($Create.Any);
const $$createType3 = $Create.Map($Create.Any, $$createType2);
const $$createType4 = MenuItem.createFrom;
const $$createType5 = $Create.Array($$createType4);
